HRESULT x12AdapterRegisterVideoMemoryBudgetChangeNotificationEvent(X12Adapter3* pAdapter, void* hEvent, unsigned* outdwCookie, char* optionalFile, int optionalLine)
void x12AdapterUnregisterVideoMemoryBudgetChangeNotification(X12Adapter3* pAdapter, unsigned dwCookie, char* optionalFile, int optionalLine)
HRESULT x12AdapterQueryVideoMemoryInfo(X12Adapter3* pAdapter, unsigned NodeIndex, DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup, DXGI_QUERY_VIDEO_MEMORY_INFO* pVideoMemoryInfo, char* optionalFile, int optionalLine)
HRESULT x12AdapterSetVideoMemoryReservation(X12Adapter3* pAdapter, unsigned NodeIndex, DXGI_MEMORY_SEGMENT_GROUP MemorySegmentGroup, uint64_t Reservation, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateHeap(X12Device3* pDevice, D3D12_HEAP_DESC* pDesc, X12Heap** outpHeap, char* optionalFile, int optionalLine)
void x12DeviceGetResourceAllocationInfo(X12Device3* pDevice, unsigned visibleMask, unsigned numResourceDescs, D3D12_RESOURCE_DESC* pResourceDescs, D3D12_RESOURCE_ALLOCATION_INFO* outResourceAllocationInfo, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreatePlacedResource(X12Device3* pDevice, X12Heap* pHeap, uint64_t HeapOffset, D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialState, D3D12_CLEAR_VALUE* pOptimizedClearValue, X12Resource** outpResource, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateCommittedResource(X12Device3* pDevice, D3D12_HEAP_PROPERTIES* pHeapProperties, D3D12_HEAP_FLAGS HeapFlags, D3D12_RESOURCE_DESC* pDesc, D3D12_RESOURCE_STATES InitialResourceState, D3D12_CLEAR_VALUE* pOptimizedClearValue, X12Resource** outpResource, char* optionalFile, int optionalLine)
HRESULT x12ResourceMap(X12Resource* pResource, unsigned Subresource, D3D12_RANGE* pReadRange, void** outpData, char* optionalFile, int optionalLine)
void x12ResourceUnmap(X12Resource* pResource, unsigned Subresource, D3D12_RANGE* pWrittenRange, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateDescriptorHeap(X12Device3* pDevice, D3D12_DESCRIPTOR_HEAP_DESC* pDescriptorHeapDesc, X12DescriptorHeap** outpHeap, char* optionalFile, int optionalLine)
void x12DescriptorHeapGetCPUDescriptorHandleForHeapStart(X12DescriptorHeap* pDescriptorHeap, D3D12_CPU_DESCRIPTOR_HANDLE* pCpuDescriptorHandle)
void x12DeviceCopyDescriptors(X12Device3* pDevice, unsigned NumDestDescriptorRanges, D3D12_CPU_DESCRIPTOR_HANDLE* pDestDescriptorRangeStarts, unsigned* pDestDescriptorRangeSizes, unsigned NumSrcDescriptorRanges, D3D12_CPU_DESCRIPTOR_HANDLE* pSrcDescriptorRangeStarts, unsigned* pSrcDescriptorRangeSizes, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapsType, char* optionalFile, int optionalLine)
void x12DescriptorHeapGetGPUDescriptorHandleForHeapStart(X12DescriptorHeap* pDescriptorHeap, D3D12_GPU_DESCRIPTOR_HANDLE* pGpuDescriptorHandle)
HRESULT x12DeviceSetResidencyPriority(X12Device3* pDevice, unsigned NumObjects, X12Pageable** ppObjects, unsigned* pPriorities, char* optionalFile, int optionalLine)
HRESULT x12DeviceEvict(X12Device3* pDevice, unsigned NumObjects, X12Pageable** ppObjects, char* optionalFile, int optionalLine)
HRESULT x12DeviceMakeResident(X12Device3* pDevice, unsigned NumObjects, X12Pageable** ppObjects, char* optionalFile, int optionalLine)
HRESULT x12DeviceEnqueueMakeResident(X12Device3* pDevice, D3D12_RESIDENCY_FLAGS Flags, unsigned NumObjects, X12Pageable** ppObjects, X12Fence* pFenceToSignal, uint64_t FenceValueToSignal, char* optionalFile, int optionalLine)
void* x12DebugEnable(char* optionalFile, int optionalLine)
void x12DebugReport(void* debugContext, char* optionalFile, int optionalLine)
HRESULT x12CreateFactory2(DXGI_CREATE_FACTORY_FLAGS Flags, X12Factory4** outpFactory, char* optionalFile, int optionalLine)
HRESULT x12FactoryEnumAdapters1(X12Factory4* pFactory, unsigned Adapter, X12Adapter3** outpAdapter, char* optionalFile, int optionalLine)
HRESULT x12CreateDevice(X12Adapter3* pAdapter, D3D_FEATURE_LEVEL MinimumFeatureLevel, X12Device3** outpDevice, char* optionalFile, int optionalLine)
void x12DeviceCreateUnorderedAccessView(X12Device3* pDevice, X12Resource* pResource, X12Resource* pCounterResource, D3D12_UNORDERED_ACCESS_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor, char* optionalFile, int optionalLine)
void x12DeviceCreateShaderResourceView(X12Device3* pDevice, X12Resource* pResource, D3D12_SHADER_RESOURCE_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor, char* optionalFile, int optionalLine)
void x12DeviceCreateConstantBufferView(X12Device3* pDevice, D3D12_CONSTANT_BUFFER_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor, char* optionalFile, int optionalLine)
void x12DeviceCreateSampler(X12Device3* pDevice, D3D12_SAMPLER_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor, char* optionalFile, int optionalLine)
void x12DeviceCreateRenderTargetView(X12Device3* pDevice, X12Resource* pResource, D3D12_RENDER_TARGET_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor, char* optionalFile, int optionalLine)
void x12DeviceCreateDepthStencilView(X12Device3* pDevice, X12Resource* pResource, D3D12_DEPTH_STENCIL_VIEW_DESC* pDesc, D3D12_CPU_DESCRIPTOR_HANDLE DestDescriptor, char* optionalFile, int optionalLine)
HRESULT x12SerializeRootSignature(D3D12_ROOT_SIGNATURE_DESC* pRootSignature, D3D_ROOT_SIGNATURE_VERSION Version, X12Blob** outpBlob, X12Blob** outpErrorBlob, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateRootSignature(X12Device3* pDevice, unsigned nodeMask, void* pBlobWithRootSignature, size_t blobLengthInBytes, X12RootSignature** outpRootSignature, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateGraphicsPipelineState(X12Device3* pDevice, D3D12_GRAPHICS_PIPELINE_STATE_DESC* pDesc, X12PipelineState** outpPipelineState, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateComputePipelineState(X12Device3* pDevice, D3D12_COMPUTE_PIPELINE_STATE_DESC* pDesc, X12PipelineState** outpPipelineState, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateFence(X12Device3* pDevice, uint64_t InitialValue, D3D12_FENCE_FLAGS Flags, X12Fence** outpFence, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateCommandQueue(X12Device3* pDevice, D3D12_COMMAND_QUEUE_DESC* pDesc, X12CommandQueue** outpCommandQueue, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateCommandAllocator(X12Device3* pDevice, D3D12_COMMAND_LIST_TYPE type, X12CommandAllocator** outpCommandAllocator, char* optionalFile, int optionalLine)
HRESULT x12DeviceCreateCommandList(X12Device3* pDevice, unsigned nodeMask, D3D12_COMMAND_LIST_TYPE type, X12CommandAllocator* pCommandAllocator, X12PipelineState* pInitialState, X12CommandList** outpCommandList, char* optionalFile, int optionalLine)
D3D12_GPU_VIRTUAL_ADDRESS x12ResourceGetGPUVirtualAddress(X12Resource* pResource)
HRESULT x12PipelineStateGetCachedBlob(X12PipelineState* pPipelineState, X12Blob** outpBlob, char* optionalFile, int optionalLine)
void* x12BlobGetBufferPointer(X12Blob* pBlob)
size_t x12BlobGetBufferSize(X12Blob* pBlob)
HRESULT x12CreateRootSignatureDeserializer(void* pSrcData, size_t SrcDataSizeInBytes, X12RootSignatureDeserializer** outpRootSignatureDeserializer, char* optionalFile, int optionalLine)
D3D12_ROOT_SIGNATURE_DESC* x12RootSignatureDeserializerGetRootSignatureDesc(X12RootSignatureDeserializer* pRootSignatureDeserializer, char* optionalFile, int optionalLine)
uint64_t x12FenceGetCompletedValue(X12Fence* pFence, char* optionalFile, int optionalLine)
HRESULT x12FenceSetEventOnCompletion(X12Fence* pFence, uint64_t Value, void* hEvent, char* optionalFile, int optionalLine)
HRESULT x12DeviceSetEventOnMultipleFenceCompletion(X12Device3* pDevice, X12Fence** ppFences, uint64_t* pFenceValues, unsigned NumFences, D3D12_MULTIPLE_FENCE_WAIT_FLAG Flag, void* hEvent, char* optionalFile, int optionalLine)
HRESULT x12FenceSignal(X12Fence* pFence, uint64_t Value, char* optionalFile, int optionalLine)
HRESULT x12CommandAllocatorReset(X12CommandAllocator* pCommandAllocator, char* optionalFile, int optionalLine)
HRESULT x12CommandListReset(X12CommandList* pCommandList, X12CommandAllocator* pAllocator, X12PipelineState* pInitialState, char* optionalFile, int optionalLine)
HRESULT x12CommandListClose(X12CommandList* pCommandList, char* optionalFile, int optionalLine)
void x12CommandListCopyBufferRegion(X12CommandList* pCommandList, X12Resource* pDstBuffer, uint64_t DstOffset, X12Resource* pSrcBuffer, uint64_t SrcOffset, uint64_t NumBytes)
void x12CommandListClearUnorderedAccessViewUint(X12CommandList* pCommandList, D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, X12Resource* pResource, unsigned Values[4], unsigned NumRects, D3D12_RECT* pRects)
void x12CommandListClearUnorderedAccessViewFloat(X12CommandList* pCommandList, D3D12_GPU_DESCRIPTOR_HANDLE ViewGPUHandleInCurrentHeap, D3D12_CPU_DESCRIPTOR_HANDLE ViewCPUHandle, X12Resource* pResource, float Values[4], unsigned NumRects, D3D12_RECT* pRects)
void x12CommandListDrawInstanced(X12CommandList* pCommandList, unsigned VertexCountPerInstance, unsigned InstanceCount, unsigned StartVertexLocation, unsigned StartInstanceLocation)
void x12CommandListDrawIndexedInstanced(X12CommandList* pCommandList, unsigned IndexCountPerInstance, unsigned InstanceCount, unsigned StartIndexLocation, int BaseVertexLocation, unsigned StartInstanceLocation)
void x12CommandListDispatch(X12CommandList* pCommandList, unsigned ThreadGroupCountX, unsigned ThreadGroupCountY, unsigned ThreadGroupCountZ)
void x12CommandListSetDescriptorHeaps(X12CommandList* pCommandList, unsigned NumDescriptorHeaps, X12DescriptorHeap** ppDescriptorHeaps)
void x12CommandListSetGraphicsRootSignature(X12CommandList* pCommandList, X12RootSignature* pRootSignature)
void x12CommandListSetGraphicsRoot32BitConstant(X12CommandList* pCommandList, unsigned RootParameterIndex, unsigned SrcData, unsigned DestOffsetIn32BitValues)
void x12CommandListSetGraphicsRoot32BitConstants(X12CommandList* pCommandList, unsigned RootParameterIndex, unsigned Num32BitValuesToSet, void* pSrcData, unsigned DestOffsetIn32BitValues)
void x12CommandListSetGraphicsRootDescriptorTable(X12CommandList* pCommandList, unsigned RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
void x12CommandListSetGraphicsRootUnorderedAccessView(X12CommandList* pCommandList, unsigned RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
void x12CommandListSetGraphicsRootShaderResourceView(X12CommandList* pCommandList, unsigned RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
void x12CommandListSetGraphicsRootConstantBufferView(X12CommandList* pCommandList, unsigned RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
void x12CommandListSetComputeRootSignature(X12CommandList* pCommandList, X12RootSignature* pRootSignature)
void x12CommandListSetComputeRoot32BitConstant(X12CommandList* pCommandList, unsigned RootParameterIndex, unsigned SrcData, unsigned DestOffsetIn32BitValues)
void x12CommandListSetComputeRoot32BitConstants(X12CommandList* pCommandList, unsigned RootParameterIndex, unsigned Num32BitValuesToSet, void* pSrcData, unsigned DestOffsetIn32BitValues)
void x12CommandListSetComputeRootDescriptorTable(X12CommandList* pCommandList, unsigned RootParameterIndex, D3D12_GPU_DESCRIPTOR_HANDLE BaseDescriptor)
void x12CommandListSetComputeRootUnorderedAccessView(X12CommandList* pCommandList, unsigned RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
void x12CommandListSetComputeRootShaderResourceView(X12CommandList* pCommandList, unsigned RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
void x12CommandListSetComputeRootConstantBufferView(X12CommandList* pCommandList, unsigned RootParameterIndex, D3D12_GPU_VIRTUAL_ADDRESS BufferLocation)
void x12CommandListClearState(X12CommandList* pCommandList, X12PipelineState* pPipelineState)
void x12CommandListSetPipelineState(X12CommandList* pCommandList, X12PipelineState* pPipelineState)
void x12CommandListIASetPrimitiveTopology(X12CommandList* pCommandList, D3D12_PRIMITIVE_TOPOLOGY PrimitiveTopology)
void x12CommandListIASetIndexBuffer(X12CommandList* pCommandList, D3D12_INDEX_BUFFER_VIEW* pView)
void x12CommandListOMSetStencilRef(X12CommandList* pCommandList, unsigned StencilRef)
void x12CommandListOMSetBlendFactor(X12CommandList* pCommandList, float* BlendFactor4Values)
void x12CommandListRSSetViewports(X12CommandList* pCommandList, unsigned NumViewports, D3D12_VIEWPORT* pViewports)
void x12CommandListRSSetScissorRects(X12CommandList* pCommandList, unsigned NumRects, D3D12_RECT* pRects)
void x12CommandListClearRenderTargetView(X12CommandList* pCommandList, D3D12_CPU_DESCRIPTOR_HANDLE RenderTargetView, float ColorRGBA[4], unsigned NumRects, D3D12_RECT* pRects)
void x12CommandListClearDepthStencilView(X12CommandList* pCommandList, D3D12_CPU_DESCRIPTOR_HANDLE DepthStencilView, D3D12_CLEAR_FLAGS ClearFlags, float Depth, unsigned char Stencil, unsigned NumRects, D3D12_RECT* pRects)
void x12CommandListDiscardResource(X12CommandList* pCommandList, X12Resource* pResource, D3D12_DISCARD_REGION* pRegion)
void x12CommandListOMSetRenderTargets(X12CommandList* pCommandList, unsigned NumRenderTargetDescriptors, D3D12_CPU_DESCRIPTOR_HANDLE* pRenderTargetDescriptors, X12Bool RTsSingleHandleToDescriptorRange, D3D12_CPU_DESCRIPTOR_HANDLE* pDepthStencilDescriptor)
void x12CommandListResolveSubresource(X12CommandList* pCommandList, X12Resource* pDstResource, unsigned DstSubresource, X12Resource* pSrcResource, unsigned SrcSubresource, DXGI_FORMAT Format)
void x12CommandListResourceBarrier(X12CommandList* pCommandList, unsigned NumBarriers, D3D12_RESOURCE_BARRIER* pBarriers)
HRESULT x12CommandQueueWait(X12CommandQueue* pCommandQueue, X12Fence* pFence, uint64_t Value, char* optionalFile, int optionalLine)
void x12CommandQueueExecuteCommandLists(X12CommandQueue* pCommandQueue, unsigned NumCommandLists, X12CommandList** ppCommandLists, char* optionalFile, int optionalLine)
HRESULT x12CommandQueueSignal(X12CommandQueue* pCommandQueue, X12Fence* pFence, uint64_t Value, char* optionalFile, int optionalLine)
X12Bool x12FactoryIsCurrent(X12Factory4* pFactory, char* optionalFile, int optionalLine)
HRESULT x12AdapterGetDesc2(X12Adapter3* pAdapter, DXGI_ADAPTER_DESC2* outDesc, char* optionalFile, int optionalLine)
HRESULT x12AdapterEnumOutputs(X12Adapter3* pAdapter, unsigned Output, X12Output4** outpOutput, char* optionalFile, int optionalLine)
void x12DeviceGetAdapterLuid(X12Device3* pDevice, uint64_t* outLuid, char* optionalFile, int optionalLine)
unsigned x12DeviceGetDescriptorHandleIncrementSize(X12Device3* pDevice, D3D12_DESCRIPTOR_HEAP_TYPE DescriptorHeapType, char* optionalFile, int optionalLine)
HRESULT x12DeviceCheckFeatureSupport(X12Device3* pDevice, D3D12_FEATURE Feature, void* pFeatureSupportData, unsigned FeatureSupportDataSize, char* optionalFile, int optionalLine)
HRESULT x12DeviceGetDeviceRemovedReason(X12Device3* pDevice, char* optionalFile, int optionalLine)
HRESULT x12DeviceSetStablePowerState(X12Device3* pDevice, X12Bool Enable, char* optionalFile, int optionalLine)
HRESULT x12FactoryCreateSwapChainForHwnd(X12Factory4* pFactory, X12CommandQueue* pCommandQueue, void* hWnd, DXGI_SWAP_CHAIN_DESC1* pDesc, DXGI_SWAP_CHAIN_FULLSCREEN_DESC* pFullscreenDesc, X12Output4* pRestrictToOutput, X12SwapChain3** outpSwapChain, char* optionalFile, int optionalLine)
HRESULT x12FactoryCreateSwapChainForCoreWindow(X12Factory4* pFactory, X12CommandQueue* pCommandQueue, void* pWindow, DXGI_SWAP_CHAIN_DESC1* pDesc, X12Output4* pRestrictToOutput, X12SwapChain3** outpSwapChain, char* optionalFile, int optionalLine)
HRESULT x12FactoryCreateSwapChainForComposition(X12Factory4* pFactory, X12CommandQueue* pCommandQueue, DXGI_SWAP_CHAIN_DESC1* pDesc, X12Output4* pRestrictToOutput, X12SwapChain3** outpSwapChain, char* optionalFile, int optionalLine)
HRESULT x12FactoryMakeWindowAssociation(X12Factory4* pFactory, void* WindowHandle, DXGI_MWA_FLAGS Flags, char* optionalFile, int optionalLine)
HRESULT x12FactoryGetWindowAssociation(X12Factory4* pFactory, void** outWindowHandle, char* optionalFile, int optionalLine)
HRESULT x12FactoryRegisterOcclusionStatusWindow(X12Factory4* pFactory, void* WindowHandle, unsigned wMsg, unsigned* pdwCookie, char* optionalFile, int optionalLine)
HRESULT x12FactoryRegisterOcclusionStatusEvent(X12Factory4* pFactory, void* hEvent, unsigned* pdwCookie, char* optionalFile, int optionalLine)
void x12FactoryUnregisterOcclusionStatus(X12Factory4* pFactory, unsigned dwCookie, char* optionalFile, int optionalLine)
HRESULT x12SwapChainGetBuffer(X12SwapChain3* pSwapChain, unsigned Buffer, X12Resource** outpSurface, char* optionalFile, int optionalLine)
unsigned x12SwapChainGetCurrentBackBufferIndex(X12SwapChain3* pSwapChain, char* optionalFile, int optionalLine)
HRESULT x12SwapChainPresent1(X12SwapChain3* pSwapChain, unsigned SyncInterval, DXGI_PRESENT_FLAGS PresentFlags, DXGI_PRESENT_PARAMETERS* pPresentParameters, char* optionalFile, int optionalLine)
HRESULT x12SwapChainResizeTarget(X12SwapChain3* pSwapChain, DXGI_MODE_DESC* pNewTargetParameters, char* optionalFile, int optionalLine)
HRESULT x12SwapChainResizeBuffers1(X12SwapChain3* pSwapChain, unsigned BufferCount, unsigned Width, unsigned Height, DXGI_FORMAT Format, unsigned SwapChainFlags, unsigned* pCreationNodeMask, X12CommandQueue** ppPresentQueue, char* optionalFile, int optionalLine)
HRESULT x12SwapChainSetFullscreenState(X12SwapChain3* pSwapChain, X12Bool Fullscreen, X12Output4* pTarget, char* optionalFile, int optionalLine)
HRESULT x12SwapChainGetFullscreenDesc(X12SwapChain3* pSwapChain, DXGI_SWAP_CHAIN_FULLSCREEN_DESC* outDesc, char* optionalFile, int optionalLine)
HRESULT x12SwapChainGetLastPresentCount(X12SwapChain3* pSwapChain, unsigned* outLastPresentCount, char* optionalFile, int optionalLine)
HRESULT x12SwapChainGetFrameStatistics(X12SwapChain3* pSwapChain, DXGI_FRAME_STATISTICS* outStats, char* optionalFile, int optionalLine)
HRESULT x12SwapChainSetBackgroundColor(X12SwapChain3* pSwapChain, DXGI_RGBA* pColor, char* optionalFile, int optionalLine)
HRESULT x12SwapChainGetBackgroundColor(X12SwapChain3* pSwapChain, DXGI_RGBA* outColor, char* optionalFile, int optionalLine)
HRESULT x12SwapChainSetRotation(X12SwapChain3* pSwapChain, DXGI_MODE_ROTATION Rotation, char* optionalFile, int optionalLine)
HRESULT x12SwapChainGetRotation(X12SwapChain3* pSwapChain, DXGI_MODE_ROTATION* outRotation, char* optionalFile, int optionalLine)
HRESULT x12SwapChainSetSourceSize(X12SwapChain3* pSwapChain, unsigned Width, unsigned Height, char* optionalFile, int optionalLine)
HRESULT x12SwapChainGetSourceSize(X12SwapChain3* pSwapChain, unsigned* outWidth, unsigned* outHeight, char* optionalFile, int optionalLine)
HRESULT x12SwapChainSetMaximumFrameLatency(X12SwapChain3* pSwapChain, unsigned MaxLatency, char* optionalFile, int optionalLine)
HRESULT x12SwapChainGetMaximumFrameLatency(X12SwapChain3* pSwapChain, unsigned* outMaxLatency, char* optionalFile, int optionalLine)
void* x12SwapChainGetFrameLatencyWaitableObject(X12SwapChain3* pSwapChain, char* optionalFile, int optionalLine)
HRESULT x12SwapChainSetMatrixTransform(X12SwapChain3* pSwapChain, DXGI_MATRIX_3X2_F* pMatrix, char* optionalFile, int optionalLine)
HRESULT x12SwapChainGetMatrixTransform(X12SwapChain3* pSwapChain, DXGI_MATRIX_3X2_F* outMatrix, char* optionalFile, int optionalLine)
HRESULT x12SwapChainCheckColorSpaceSupport(X12SwapChain3* pSwapChain, DXGI_COLOR_SPACE_TYPE ColorSpace, DXGI_SWAP_CHAIN_COLOR_SPACE_SUPPORT_FLAGS* outColorSpaceSupport, char* optionalFile, int optionalLine)
HRESULT x12SwapChainSetColorSpace1(X12SwapChain3* pSwapChain, DXGI_COLOR_SPACE_TYPE ColorSpace, char* optionalFile, int optionalLine)
HRESULT x12OutputGetDesc(X12Output4* pOutput, DXGI_OUTPUT_DESC* outDesc, char* optionalFile, int optionalLine)
HRESULT x12OutputGetDisplayModeList1(X12Output4* pOutput, DXGI_FORMAT EnumFormat, DXGI_ENUM_MODES_FLAGS Flags, unsigned* pNumModes, DXGI_MODE_DESC1* outDesc, char* optionalFile, int optionalLine)
HRESULT x12OutputFindClosestMatchingMode1(X12Output4* pOutput, DXGI_MODE_DESC1* pModeToMatch, DXGI_MODE_DESC1* pClosestMatch, X12Device3* pConcernedDevice, char* optionalFile, int optionalLine)
HRESULT x12OutputWaitForVBlank(X12Output4* pOutput, char* optionalFile, int optionalLine)
HRESULT x12OutputGetGammaControlCapabilities(X12Output4* pOutput, DXGI_GAMMA_CONTROL_CAPABILITIES* outGammaCaps, char* optionalFile, int optionalLine)
HRESULT x12OutputSetGammaControl(X12Output4* pOutput, DXGI_GAMMA_CONTROL* pArray, char* optionalFile, int optionalLine)
HRESULT x12OutputGetGammaControl(X12Output4* pOutput, DXGI_GAMMA_CONTROL* outArray, char* optionalFile, int optionalLine)
HRESULT x12OutputGetFrameStatistics(X12Output4* pOutput, DXGI_FRAME_STATISTICS* outStats, char* optionalFile, int optionalLine)
X12Bool x12OutputSupportsOverlays(X12Output4* pOutput, char* optionalFile, int optionalLine)
HRESULT x12OutputCheckOverlaySupport(X12Output4* pOutput, DXGI_FORMAT EnumFormat, X12Device3* pConcernedDevice, unsigned* pFlags, char* optionalFile, int optionalLine)
HRESULT x12OutputCheckOverlayColorSpaceSupport(X12Output4* pOutput, DXGI_FORMAT Format, DXGI_COLOR_SPACE_TYPE ColorSpace, X12Device3* pConcernedDevice, DXGI_OVERLAY_COLOR_SPACE_SUPPORT_FLAGS* outFlags, char* optionalFile, int optionalLine)
HRESULT x12ObjectSetName(void* handle, wchar_t* Name, char* optionalFile, int optionalLine)
void x12Release(void* handle, char* optionalFile, int optionalLine)
void x12CommandListSetMarker(X12CommandList* handle, unsigned Metadata, void* pData, unsigned Size)
void x12CommandListBeginEvent(X12CommandList* handle, unsigned Metadata, void* pData, unsigned Size)
void x12CommandListEndEvent(X12CommandList* handle)
void x12CommandQueueSetMarker(X12CommandQueue* handle, unsigned Metadata, void* pData, unsigned Size)
void x12CommandQueueBeginEvent(X12CommandQueue* handle, unsigned Metadata, void* pData, unsigned Size)
void x12CommandQueueEndEvent(X12CommandQueue* handle)